# -*- coding: utf-8 -*-
"""House price prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14FyJ8WIe0RkXWopJu-5cFawvJuO6htVg
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import sklearn.datasets
from sklearn.metrics import mean_absolute_error,r2_score, accuracy_score

house_data = sklearn.datasets.fetch_california_housing()
print(house_data)

#adding house dataset to dataframe
df = pd.DataFrame(house_data.data , columns = house_data.feature_names)
print(df.head())

#inserting the target columns in df
df["price"] = house_data.target
print(df.head())

#printing the shape
print(df.shape)

#checking the null values
print(df.isnull().sum())

# appling the statistical operations
print(df.describe())

#makeing the corelation
corr = df.corr()

#constructing the heat map using matplotlib
# Plot heatmap with matplotlib
plt.figure(figsize=(10,8))
plt.imshow(corr, cmap='coolwarm', interpolation='nearest')
plt.colorbar(label="Correlation Coefficient")

# Add ticks and labels
plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)
plt.yticks(range(len(corr.columns)), corr.columns)

plt.title("Correlation Heatmap of California Housing Data", fontsize=14)
plt.show()

# training the model
X = df.drop(['price'], axis = 1)
y = df['price']

# using the model selection
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=2)

#print thr size of all
print(X.shape, X_train.shape, X_test.shape )

#training the model
model = LinearRegression()
model.fit(X_train,y_train)

#predicting the Xtrain and calculatin the score
X_train_pred = model.predict(X_train)

# printing the Mean scored error and r2 score
mae_1 = mean_absolute_error(y_train, X_train_pred)
r2_1 = r2_score(y_train, X_train_pred)

print('Mean absolute error = ', mae_1)
print('r2_score = ', r2_1)

#predicting the Xtrain and calculatin the score
X_test_pred = model.predict(X_test)

# printing the Mean scored error and r2 score
mae_2 = mean_absolute_error(y_test, X_test_pred)
r2_2 = r2_score(y_test, X_test_pred)

print('Mean absolute error = ', mae_2)
print('r2_score = ', r2_2)

#ploting the graph between ytrain and pres x train
plt.figure()
plt.scatter(y_train, X_train_pred, color = 'red')
plt.plot(y_train, y_train, color = 'blue')
plt.xlabel('Actual prices')
plt.ylabel('Ptrdicted prices')
plt.title('y_train Vs X_train_pred')
plt.show()

# df.to_csv('housing.csv', index=False)
# from google.colab import files
# files.download('housing.csv')

df.columns

input_data = []
for col in df.columns:
  if col == 'price':
    continue
  input_values = float(input(f"enter the value for {col} = "))
  input_data.append(input_values)

print(input_data)

input_data

id_array = np.asarray(input_data)
id_array_reshape = id_array.reshape(1, -1)

pred = model.predict(id_array_reshape)
print(pred)
pred_price = pred[0]
print(pred_price)

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

# Features and target
# X = df.drop("Price", axis=1)
# y = df["Price"]

# Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train regression
model = LinearRegression()
model.fit(X_train_scaled, y_train)

# Predict
y_pred = model.predict(id_array_reshape)
print(y_pred)

