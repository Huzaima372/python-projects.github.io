# -*- coding: utf-8 -*-
"""pakistan students marks predict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1coGc4IZCM2BbsJIqcK5a-WN3f3OWAh31

1 ask your self => are X y numeric => scatter graph
2 is column a category => bar or count graph
3 want to see distribution => histogram, KDE, box graph

## PROBLEM STATEMENT
 can we chk the hour study make impact on marks

## SOLUTION STATEMENT
linearregression to learn study hour and predict final score

### a web app to predict marks
"""

from google.colab import files
files.upload()

# filename = 'student_dataset_pakistan.csv'
# filename

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('student_dataset_pakistan_updated.csv')
df.head()

"""step 1"""

df.isnull().sum()

df.columns = df.columns.str.lower()
df.columns
df[['midterm_score']]

X = df[['study_hour_per_week']]
y = df['final_score']

model = LinearRegression()
model.fit(X,y)

pred_score = model.predict(X)

# Model parameters
print("Intercept:", model.intercept_)
print("Coefficients:", model.coef_)

# show results
mae= mean_absolute_error(y,pred_score)
mse= mean_squared_error(y,pred_score)
rmse = np.sqrt(mse)
r2 = r2_score(y,pred_score)

print('mae', round(mae, 2))
print('mse', round(mse, 2))
print('rmse', round(rmse, 2))
print('r^2 score', round(r2 , 2))

# histogram
plt.figure(figsize=(10, 6))
plt.hist(df['final_score'], bins=30, color='skyblue', edgecolor='black')
plt.xlabel('Final Score')
plt.ylabel('Number of studenta')
plt.title('Distribution of Final Scores')
plt.grid(True)
plt.show()

plt.scatter(X,y, color='blue', label='X,y')
plt.plot(X,pred_score, color = 'red', label='X nd pred')
plt.legend()
plt.xlabel('student marks')
plt.ylabel('study hour')
plt.title('study hour vs marks')
plt.show()

X = df[['study_hour_per_week', 'midterm_score', ]]
y = df['final_score']

model = LinearRegression()
model.fit(X,y)

pred_score = model.predict(X)

# Model parameters
print("Intercept:", model.intercept_)
print("Coefficients:", model.coef_)

# show results
mae= mean_absolute_error(y,pred_score)
mse= mean_squared_error(y,pred_score)
rmse = np.sqrt(mse)
r2 = r2_score(y,pred_score)

print('mae', round(mae, 2))
print('mse', round(mse, 2))
print('rmse', round(rmse, 2))
print('r^2 score', round(r2 , 2))

# histogram
plt.figure(figsize=(10, 6))
plt.hist(df['final_score'], bins=30, color='skyblue', edgecolor='black')
plt.xlabel('Final Score')
plt.ylabel('Number of studenta')
plt.title('Distribution of Final Scores')
plt.grid(True)
plt.show()

# Predict scores
pred_score = model.predict(X)

# Scatter plot (study hours vs actual final score)
plt.scatter(df['study_hour_per_week'], y, color='blue', label='per week stdy hour')
plt.scatter(df['midterm_score'], y, color='skyblue', label='midterm')

# Line plot (study hours vs predicted final score)
plt.plot(df['study_hour_per_week'], pred_score, color='red', label='Predicted by hour')
plt.plot(df['midterm_score'], pred_score, color='black', label='Predicted by midterm')

plt.legend()
plt.xlabel('Study Hours per Week')
plt.ylabel('Final Score')
plt.title('Study Hours vs Final Score')
plt.show()

pred_in = float(input("enter hour to guess marks"))
pred = model.predict([[pred_in]])
print(pred)

df.columns = df.columns.str.capitalize()
df.columns

df.columns





