# -*- coding: utf-8 -*-
"""diabetic prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XxKtUeeMkki9C5PMFfb5dh-jEl4NWUOW
"""

# from google.colab import files
# files.upload()

"""IMPORTING THE DEPENDENCIES"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""DATA COLLECTION AND ANALYSIS"""

df = pd.read_csv('diabetes.csv')
df.head(4)

df.columns = df.columns.str.lower()
df.columns

#checking number of rows and coluumns
df.shape

#getting the statistical measures of data
df.describe()

df['outcome'].value_counts()

# 0 => non disbetic people
# 1 =>  disbetic people

df.groupby('outcome').mean()

#seprate the data and labels
X = df.drop(columns = 'outcome', axis = 1)  # X have all columns except 'outcome'
y = df['outcome']   # y have data of outcome

print(X)

print(y)

"""DATA STANDERIZATION"""

ss = StandardScaler()
s_X = ss.fit_transform(X)
s_X

X = s_X
y = df['outcome']

print(X,y)

"""train test split model"""

X_train, X_test, Y_train, Y_test = train_test_split(X,y, test_size = 0.2, stratify = y, random_state = 2)
# stratify => value 1 or 0
# random 2 => data is spillited in same way

print(X.shape, X_train.shape, X_test.shape)

"""TRAINING THE MODEL"""

model = svm.SVC(kernel = 'linear')

#training the support vector machine classifier
model.fit(X_train, Y_train)

"""MODEL EVALUATION"""

X_train_prediction = model.predict(X_train)
accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy score of training data : ', accuracy)
# is acc sore> 75 its good

X_test_prediction = model.predict(X_test)
accuracy_test = accuracy_score(X_test_prediction, Y_test)
print('Accuracy score of training data : ', accuracy_test)
# is acc sore> 75 its good

# data = [8,99,84,0,0,35.4,0.388,50]
data = [4,110,92,0,0,37.6,0.191,30]

adata = np.asarray(data)
sdata = adata.reshape(1,-1)

s_data = ss.transform(sdata)
print(s_data)

pred = model.predict(s_data)
print(pred)

if (pred[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

plt.scatter(df['bloodpressure'],y, color='red')
# plt.plot(df['bloodpressure'],pred, color='red')
# plt.scatter(df['diabetespedigreefunction'],y, color='PINK')
# plt.scatter(df['glucose'],y, color='green')
# plt.scatter(df['skinthickness'],y, color='blue')
# plt.scatter(df['insulin'],y, color='black')
# plt.scatter(df['insulin'],df['bloodpressure'])
# plt.plot(,y)
# plt.plot()
plt.show()

df.columns.str.capitalize()

print('FILL ALL THE DATA ACCURATE TO PREDECT')
preg = float(input("Enter Your Pregnancies: "))
glu = float(input("Enter Your Glucose: "))
bp = float(input("Enter Your Bloodpressure: "))
skinthick = float(input("Enter Your Skinthickness: "))
insu = float(input("Enter Your Insulin: "))
bmi = float(input("Enter Your Bmi: "))
dpf = float(input("Enter Your Diabetespedigreefunction: "))
age = float(input("Enter Your Age: "))

input_data = (preg,glu,bp,skinthick,insu,bmi,dpf,age)
input_data_array = np.asarray(input_data)
final_input_data_array = input_data_array.reshape(1,-1)

standered_data = ss.transform(final_input_data_array)

input_data_prediction = model.predict(standered_data)
print(input_data_prediction)


if (input_data_prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

# print(accuracy_score(input_data_prediction,y))

df.columns = df.columns.str.capitalize()
df.columns

features = ['Pregnancies', 'Glucose', 'Bloodpressure', 'Skinthickness',
            'Insulin', 'Bmi', 'Diabetespedigreefunction', 'Age']

fig, axes = plt.subplots(2, 4, figsize=(16, 8))
axes = axes.ravel()  # Flatten the 2D array of axes to 1D for easy looping

for i, feature in enumerate(features):
    axes[i].scatter(df[feature], df['Outcome'], alpha=0.6)
    axes[i].set_title(feature)
    axes[i].set_xlabel(feature)
    axes[i].set_ylabel('Outcome')

plt.tight_layout()
plt.show()

