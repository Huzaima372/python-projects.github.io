# -*- coding: utf-8 -*-
"""Heart disease prediction app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nj2YuscOzOUVgt8eqylF2084Phn-ULr3
"""

from google.colab import files
files.upload()

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, mean_absolute_error, mean_squared_error, r2_score

df = pd.read_csv('heart_disease_data.csv')
df.head()

df.isnull().sum()

df.describe()

df['target'].value_counts()

"""1 => effected in heart disease
0 => not effected
"""

df.groupby('target').mean()

X = df.drop(columns='target', axis=1)
y = df['target']

print(X)

print(y)

df.shape

ss = StandardScaler()
s_x = ss.fit_transform(X)
print(s_x)

X = s_x
y = y

print(X,y)

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.1, stratify=y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

model = LogisticRegression()
model.fit(X_train, y_train)

pred_X_train = model.predict(X_train)
print(pred_X_train)

accuracy = accuracy_score(pred_X_train, y_train)
print(f'Accuracy score of pred_X_train and y_train is {accuracy}')

pred_X_test = model.predict(X_test)
print(pred_X_test.shape, y_test.shape)
print(pred_X_test,"\n", y_test)

accuracy = accuracy_score(pred_X_test, y_test)
print(f'Accuracy score of pred_X_train and y_train is {accuracy}')

df.columns

data = []
for col in df.columns:
  if col == 'target':
    break
  value = float(input(f'Enter value of {col} ='))
  data.append(value)
print(data)

# data = [64,1,3,110,211,0,0,144,1,1.8,1,0,2]
# => 1
# data = [60,1,0,130,253,0,1,144,1,1.4,2,1,3]
# data=[64,1,3,110,211,0,0,144,1,1.8,1,0,2]
# data = [0,1,12,4,56,1,3,4,9,3,4,5,6]
# => 0
# data = [42,1,0,136,315,0,1,125,1,1.8,1,0,1]
# data = [46,1,0,140,311,0,1,120,1,1.8,1,2,3]
# data = [57,1,0,110,335,0,1,143,1,3,1,1,3]

data_array = np.asarray(data)
data_array_reshaped = data_array.reshape(1,-1)

ss_data = ss.transform(data_array_reshaped)

pred_data_array_reshaped = model.predict(ss_data)
print(pred_data_array_reshaped)

if pred_data_array_reshaped[0] == 0:
  print('The person does not have a heart disease')
else:
  print('The person has a heart disease')

print(accuracy_score(pred_X_test, y_test))
print(mean_absolute_error(pred_X_test, y_test))
print(mean_squared_error(pred_X_test, y_test))
print(r2_score(pred_X_test, y_test))

# scatter
# line

plt.scatter(pred_X_test, y_test)
plt.plot(pred_X_test, y_test)
plt.show()
plt.figure(figsize=(10, 6))
plt.hist(y_train, bins=30, color='skyblue', edgecolor='black')
plt.xlabel('Final Score')
plt.ylabel('Number of studenta')
plt.title('Distribution of Final Scores')
plt.grid(True)
plt.show()

